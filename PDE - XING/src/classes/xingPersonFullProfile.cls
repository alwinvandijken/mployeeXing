//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class xingPersonFullProfile {
	public static void consumeObject(JSONParser parser) {
		Integer depth = 0;
		do {
			JSONToken curr = parser.getCurrentToken();
			if (curr == JSONToken.START_OBJECT || 
				curr == JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == JSONToken.END_OBJECT ||
				curr == JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

	public class Users {
		public String id {get;set;}
		public String first_name {get;set;}
		public String last_name {get;set;}
		public String display_name {get;set;}
		public String page_name {get;set;}
		public String permalink {get;set;}
		public String gender {get;set;}
		public Birth_date birth_date {get;set;}
		public String active_email {get;set;}
		public Time_zone time_zone {get;set;}
		public String premium_services {get;set;}
		public String badges {get;set;}
		public String wants {get;set;}
		public String haves {get;set;}
		public String interests {get;set;}
		public String organisation_member {get;set;}
		public Languages languages {get;set;}
		public Private_address private_address {get;set;}
		public Private_address business_address {get;set;}
		public Web_profiles web_profiles {get;set;}		
        public im_accounts im_accounts {get;set;} 
		public Professional_experience professional_experience {get;set;}
		public Educational_background educational_background {get;set;}
		public Photo_urls photo_urls {get;set;}

		public Users(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'first_name') {
							first_name = parser.getText();
						} else if (text == 'last_name') {
							last_name = parser.getText();
						} else if (text == 'display_name') {
							display_name = parser.getText();
						} else if (text == 'page_name') {
							page_name = parser.getText();
						} else if (text == 'permalink') {
							permalink = parser.getText();
						} else if (text == 'gender') {
							gender = parser.getText();
						} else if (text == 'birth_date') {
							birth_date = new Birth_date(parser);
						} else if (text == 'active_email') {
							active_email = parser.getText();
                            
						} else if (text == 'time_zone') {
							time_zone = new Time_zone(parser);
                            
                        } else if (text == 'premium_services') {
							premium_services = parser.getText();
                        } else if (text == 'badges') {
							badges = parser.getText();
						} else if (text == 'wants') {
							wants = parser.getText();
						} else if (text == 'haves') {
							haves = parser.getText();
						} else if (text == 'interests') {
							interests = parser.getText();
						} else if (text == 'organisation_member') {
							organisation_member = parser.getText();
						} else if (text == 'languages') {                            
							languages = new Languages(parser);
						} else if (text == 'private_address') {
							private_address = new Private_address(parser);
						} else if (text == 'business_address') {
							business_address = new Private_address(parser);
						} else if (text == 'web_profiles') {
							web_profiles = new Web_profiles(parser);
						} else if (text == 'instant_messaging_accounts') {
                            im_accounts = new im_accounts(parser);                            
						} else if (text == 'professional_experience') {
							professional_experience = new Professional_experience(parser);
						} else if (text == 'educational_background') {
							educational_background = new Educational_background(parser);
						} else if (text == 'photo_urls') {
							photo_urls = new Photo_urls(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Users consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
    
    
    public class Qualification {
    	public String name {get;set;}  
    }
	
	public class Educational_background {
		public List<Schools> schools {get;set;}
		public List<qualification> qualifications {get;set;}

		public Educational_background(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'schools') {
							schools = new List<Schools>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								schools.add(new Schools(parser));
							}
						} else if (text == 'qualifications') {
                            qualifications = new List<qualification>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Qualification qualification = new Qualification();
                                qualification.name = parser.getText();
								qualifications.add(qualification);
                            }
                        }else {
							System.debug(LoggingLevel.WARN, 'Educational_background consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Private_address {
		public String city {get;set;}
		public String country {get;set;}
		public String zip_code {get;set;}
		public String street {get;set;}
		public String phone {get;set;}
		public String fax {get;set;}
		public String province {get;set;}
		public String email {get;set;}
		public String mobile_phone {get;set;}

		public Private_address(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'city') {
							city = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'zip_code') {
							zip_code = parser.getText();
						} else if (text == 'street') {
							street = parser.getText();
						} else if (text == 'phone') {
							phone = parser.getText();
						} else if (text == 'fax') {
							fax = parser.getText();
						} else if (text == 'province') {
							province = parser.getText();
						} else if (text == 'email') {
							email = parser.getText();
						} else if (text == 'mobile_phone') {
							mobile_phone = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Private_address consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
    
    public class im_account{
        public String label {get;set;}
        public String name {get;set;}    
    }
    
    public class im_accounts{
    	public List<im_account> values {get;set;}
        
        public im_accounts(JSONParser parser){
        	values = new List<im_account>();
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                im_account ima = new im_account();
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    ima.label = parser.getText();
                }
                if (parser.nextToken() != JSONToken.VALUE_NULL) {
                    ima.name = parser.getText();
                }
                values.add(ima);
            }
        }
    }
    
    public class webURL{
    	public String url {get;set;}        
    }    
    
    public class webProfile{
        public String name {get;set;}
        public List<webURL> webURLs {get;set;}   
    }
	
	public class Web_profiles {
        public List<webProfile> values {get;set;}		

		public Web_profiles(JSONParser parser) {
            values = new List<webProfile>();
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                webProfile webProfile = new webProfile();
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    System.debug( 'xxx Current token = field name: ' +parser.getCurrentToken()+' value: '+ parser.getText() );
                    
                    webProfile.name = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        List<webURL> webURLs = new List<webURL>();
                        while (parser.nextToken() != JSONToken.END_ARRAY) {                            
							System.debug('xxx In array: '+parser.getCurrentToken()+' value: '+ parser.getText());
                            webURL webURL = new webURL();
                            webURL.url = parser.getText();
                            webURLs.add(webURL);                                
						}
                        webProfile.webURLs = webURLs;
                    }                    
                }
                values.add(webProfile); 
            }                       
		}
	}
	
	public class Non_primary_companies {
		public String name {get;set;}
		public String title {get;set;}
		public String company_size {get;set;}
		public String tag {get;set;}
		public String url {get;set;}
		public String career_level {get;set;}
		public String begin_date {get;set;}
		public String description {get;set;}
		public String end_date {get;set;}
		public String industry {get;set;}

		public Non_primary_companies(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'company_size') {
							company_size = parser.getText();
						} else if (text == 'tag') {
							tag = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'career_level') {
							career_level = parser.getText();
						} else if (text == 'begin_date') {
							begin_date = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'end_date') {
							end_date = parser.getText();
						} else if (text == 'industry') {
							industry = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Non_primary_companies consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Birth_date {
		public Integer day {get;set;}
		public Integer month {get;set;}
		public Integer year {get;set;}

		public Birth_date(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'day') {
							day = parser.getIntegerValue();
						} else if (text == 'month') {
							month = parser.getIntegerValue();
						} else if (text == 'year') {
							year = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Birth_date consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Photo_urls {
		public String large {get;set;}
		public String mini_thumb {get;set;}
		public String thumb {get;set;}
		public String medium_thumb {get;set;}
		public String maxi_thumb {get;set;}

		public Photo_urls(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'large') {
							large = parser.getText();
						} else if (text == 'mini_thumb') {
							mini_thumb = parser.getText();
						} else if (text == 'thumb') {
							thumb = parser.getText();
						} else if (text == 'medium_thumb') {
							medium_thumb = parser.getText();
						} else if (text == 'maxi_thumb') {
							maxi_thumb = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Photo_urls consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
    public class Language{
        public String name {get;set;}
		public String level {get;set;}     
        
    }
    
    public class Languages {
		public List<Language> values {get;set;}	

		public Languages(JSONParser parser) {
            values = new List<Language>();
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                Language language = new Language();
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    language.name = parser.getText();
                }
                if (parser.nextToken() != JSONToken.VALUE_NULL) {
                    language.level = parser.getText();
                }
                values.add(language);
            }
			
		}
		
	}
    
	
	
	public class Primary_company {
		public String name {get;set;}
		public String title {get;set;}
		public String company_size {get;set;}
		public String tag {get;set;}
		public String url {get;set;}
		public String career_level {get;set;}
		public String begin_date {get;set;}
		public String description {get;set;}
		public String end_date {get;set;}
		public String industry {get;set;}

		public Primary_company(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'company_size') {
							company_size = parser.getText();
						} else if (text == 'tag') {
							tag = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'career_level') {
							career_level = parser.getText();
						} else if (text == 'begin_date') {
							begin_date = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'end_date') {
							end_date = parser.getText();
						} else if (text == 'industry') {
							industry = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Primary_company consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Professional_experience {
		public Primary_company primary_company {get;set;}
		public List<Non_primary_companies> non_primary_companies {get;set;}
		public List<Awards> awards {get;set;}

		public Professional_experience(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'primary_company') {
							primary_company = new Primary_company(parser);
						} else if (text == 'non_primary_companies') {
							non_primary_companies = new List<Non_primary_companies>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								non_primary_companies.add(new Non_primary_companies(parser));
							}
						} else if (text == 'awards') {
							awards = new List<Awards>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								awards.add(new Awards(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'Professional_experience consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Schools {
		public String name {get;set;}
		public String degree {get;set;}
		public String notes {get;set;}
		public String subject {get;set;}
		public String begin_date {get;set;}
		public String end_date {get;set;}

		public Schools(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'degree') {
							degree = parser.getText();
						} else if (text == 'notes') {
							notes = parser.getText();
						} else if (text == 'subject') {
							subject = parser.getText();
						} else if (text == 'begin_date') {
							begin_date = parser.getText();
						} else if (text == 'end_date') {
							end_date = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Schools consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Users> users {get;set;}

	public xingPersonFullProfile(JSONParser parser) {
		while (parser.nextToken() != JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != JSONToken.VALUE_NULL) {
					if (text == 'users') {
						users = new List<Users>();
						while (parser.nextToken() != JSONToken.END_ARRAY) {
							users.add(new Users(parser));
						}
					} else {
						System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Awards {
		public String name {get;set;}
		public Integer date_awarded {get;set;}
		public String url {get;set;}

		public Awards(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'date_awarded') {
							date_awarded = parser.getIntegerValue();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Awards consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Time_zone {
		public String name {get;set;}
		public Double utc_offset {get;set;}

		public Time_zone(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'utc_offset') {
							utc_offset = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Time_zone consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}	
	
	
    // Added manual
    public xingPersonFullProfile(String urlName){
        this(System.JSON.createParser(xingUtil.get(urlName)));
    }
    //
	
	public static xingPersonFullProfile parse(String json) {
		return new xingPersonFullProfile(System.JSON.createParser(json));
	}
	
	// This test method should give 100% coverage
	static testMethod void testParse() {
		String json = '{'+
		'  \"users\": [{'+
		'    \"id\": \"123456_abcdef\",'+
		'    \"first_name\": \"Max\",'+
		'    \"last_name\": \"Mustermann\",'+
		'    \"display_name\": \"Max Mustermann\",'+
		'    \"page_name\": \"Max_Mustermann\",'+
		'    \"permalink\": \"https://www.xing.com/profile/Max_Mustermann\",'+
		'    \"gender\": \"m\",'+
		'    \"birth_date\": {'+
		'      \"day\": 12,'+
		'      \"month\": 8,'+
		'      \"year\": 1963'+
		'    },'+
		'    \"active_email\": \"max.mustermann@xing.com\",'+
		'    \"time_zone\": {'+
		'      \"name\": \"Europe/Copenhagen\",'+
		'      \"utc_offset\": 2.0'+
		'    },'+
		'    \"premium_services\": [\"SEARCH\", \"PRIVATEMESSAGES\"],'+
		'    \"badges\": [\"PREMIUM\", \"MODERATOR\"],'+
		'    \"wants\": \"einen neuen Job\",'+
		'    \"haves\": \"viele tolle Skills\",'+
		'    \"interests\": \"Flitzebogen schießen and so on\",'+
		'    \"organisation_member\": \"ACM, GI\",'+
		'    \"languages\": {'+
		'      \"de\": \"NATIVE\",'+
		'      \"en\": \"FLUENT\",'+
		'      \"fr\": null,'+
		'      \"zh\": \"BASIC\"'+
		'    },'+
		'    \"private_address\": {'+
		'      \"city\": \"Hamburg\",'+
		'      \"country\": \"DE\",'+
		'      \"zip_code\": \"20357\",'+
		'      \"street\": \"Privatstraße 1\",'+
		'      \"phone\": \"49|40|1234560\",'+
		'      \"fax\": \"||\",'+
		'      \"province\": \"Hamburg\",'+
		'      \"email\": \"max@mustermann.de\",'+
		'      \"mobile_phone\": \"49|0155|1234567\"'+
		'    },'+
		'    \"business_address\": {'+
		'      \"city\": \"Hamburg\",'+
		'      \"country\": \"DE\",'+
		'      \"zip_code\": \"20357\",'+
		'      \"street\": \"Geschäftsstraße 1a\",'+
		'      \"phone\": \"49|40|1234569\",'+
		'      \"fax\": \"49|40|1234561\",'+
		'      \"province\": \"Hamburg\",'+
		'      \"email\": \"max.mustermann@xing.com\",'+
		'      \"mobile_phone\": \"49|160|66666661\"'+
		'    },'+
		'    \"web_profiles\": {'+
		'      \"qype\": [\"http://qype.de/users/foo\"],'+
		'      \"google_plus\": [\"http://plus.google.com/foo\"],'+
		'      \"blog\": [\"http://blog.example.org\"],'+
		'      \"homepage\": [\"http://example.org\", \"http://other-example.org\"]'+
		'    },'+
		'    \"instant_messaging_accounts\": {'+
		'      \"skype\": \"1122334455\",'+
		'      \"googletalk\": \"max.mustermann\"'+
		'    },'+
		'    \"professional_experience\": {'+
		'      \"primary_company\": {'+
		'        \"name\": \"XING AG\",'+
		'        \"title\": \"Softwareentwickler\",'+
		'        \"company_size\": \"201-500\",'+
		'        \"tag\": null,'+
		'        \"url\": \"http://www.xing.com\",'+
		'        \"career_level\": \"PROFESSIONAL_EXPERIENCED\",'+
		'        \"begin_date\": \"2010-01\",'+
		'        \"description\": null,'+
		'        \"end_date\": null,'+
		'        \"industry\": \"AEROSPACE\"'+
		'      },'+
		'      \"non_primary_companies\": [{'+
		'        \"name\": \"Ninja Ltd.\",'+
		'        \"title\": \"DevOps\",'+
		'        \"company_size\": null,'+
		'        \"tag\": \"NINJA\",'+
		'        \"url\": \"http://www.ninja-ltd.co.uk\",'+
		'        \"career_level\": null,'+
		'        \"begin_date\": \"2009-04\",'+
		'        \"description\": null,'+
		'        \"end_date\": \"2010-07\",'+
		'        \"industry\": \"ALTERNATIVE_MEDICINE\"'+
		'      },'+
		'      {'+
		'        \"name\": null,'+
		'        \"title\": \"Wiss. Mitarbeiter\",'+
		'        \"company_size\": null,'+
		'        \"tag\": \"OFFIS\",'+
		'        \"url\": \"http://www.uni.de\",'+
		'        \"career_level\": null,'+
		'        \"begin_date\": \"2007\",'+
		'        \"description\": null,'+
		'        \"end_date\": \"2008\",'+
		'        \"industry\": \"APPAREL_AND_FASHION\"'+
		'      },'+
		'      {'+
		'        \"name\": null,'+
		'        \"title\": \"TEST NINJA\",'+
		'        \"company_size\": \"201-500\",'+
		'        \"tag\": \"TESTCOMPANY\",'+
		'        \"url\": null,'+
		'        \"career_level\": \"ENTRY_LEVEL\",'+
		'        \"begin_date\": \"1998-12\",'+
		'        \"description\": null,'+
		'        \"end_date\": \"1999-05\",'+
		'        \"industry\": \"ARTS_AND_CRAFTS\"'+
		'      }],'+
		'      \"awards\": [{'+
		'        \"name\": \"Awesome Dude Of The Year\",'+
		'        \"date_awarded\": 2007,'+
		'        \"url\": null'+
		'      }]'+
		'    },'+
		'    \"educational_background\": {'+
		'      \"schools\": [{'+
		'        \"name\": \"Carl-von-Ossietzky Universtät Schellenburg\",'+
		'        \"degree\": \"MSc CE/CS\",'+
		'        \"notes\": null,'+
		'        \"subject\": null,'+
		'        \"begin_date\": \"1998-08\",'+
		'        \"end_date\": \"2005-02\"'+
		'      }],'+
		'      \"qualifications\": [\"TOEFLS\", \"PADI AOWD\"]'+
		'    },'+
		'    \"photo_urls\": {'+
		'      \"large\": \"http://www.xing.com/img/users/e/3/d/f94ef165a.123456,1.140x185.jpg\",'+
		'      \"mini_thumb\": \"http://www.xing.com/img/users/e/3/d/f94ef165a.123456,1.18x24.jpg\",'+
		'      \"thumb\": \"http://www.xing.com/img/users/e/3/d/f94ef165a.123456,1.30x40.jpg\",'+
		'      \"medium_thumb\": \"http://www.xing.com/img/users/e/3/d/f94ef165a.123456,1.57x75.jpg\",'+
		'      \"maxi_thumb\": \"http://www.xing.com/img/users/e/3/d/f94ef165a.123456,1.70x93.jpg\"'+
		'    }'+
		'  }]'+
		'}';
		xingPersonFullProfile r = parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Users objUsers = new Users(System.JSON.createParser(json));
		System.assert(objUsers != null);
		System.assert(objUsers.id == null);
		System.assert(objUsers.first_name == null);
		System.assert(objUsers.last_name == null);
		System.assert(objUsers.display_name == null);
		System.assert(objUsers.page_name == null);
		System.assert(objUsers.permalink == null);
		System.assert(objUsers.gender == null);
		System.assert(objUsers.birth_date == null);
		System.assert(objUsers.active_email == null);
		System.assert(objUsers.time_zone == null);
		System.assert(objUsers.premium_services == null);
		System.assert(objUsers.badges == null);
		System.assert(objUsers.wants == null);
		System.assert(objUsers.haves == null);
		System.assert(objUsers.interests == null);
		System.assert(objUsers.organisation_member == null);
		System.assert(objUsers.languages == null);
		System.assert(objUsers.private_address == null);
		System.assert(objUsers.business_address == null);
		System.assert(objUsers.web_profiles == null);
		System.assert(objUsers.im_accounts == null);
		System.assert(objUsers.professional_experience == null);
		System.assert(objUsers.educational_background == null);
		System.assert(objUsers.photo_urls == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Educational_background objEducational_background = new Educational_background(System.JSON.createParser(json));
		System.assert(objEducational_background != null);
		System.assert(objEducational_background.schools == null);
		System.assert(objEducational_background.qualifications == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Private_address objPrivate_address = new Private_address(System.JSON.createParser(json));
		System.assert(objPrivate_address != null);
		System.assert(objPrivate_address.city == null);
		System.assert(objPrivate_address.country == null);
		System.assert(objPrivate_address.zip_code == null);
		System.assert(objPrivate_address.street == null);
		System.assert(objPrivate_address.phone == null);
		System.assert(objPrivate_address.fax == null);
		System.assert(objPrivate_address.province == null);
		System.assert(objPrivate_address.email == null);
		System.assert(objPrivate_address.mobile_phone == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Web_profiles objWeb_profiles = new Web_profiles(System.JSON.createParser(json));
		System.assert(objWeb_profiles != null);
		//System.assert(objWeb_profiles.qype == null);
		//System.assert(objWeb_profiles.google_plus == null);
		//System.assert(objWeb_profiles.blog == null);
		//System.assert(objWeb_profiles.homepage == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Non_primary_companies objNon_primary_companies = new Non_primary_companies(System.JSON.createParser(json));
		System.assert(objNon_primary_companies != null);
		System.assert(objNon_primary_companies.name == null);
		System.assert(objNon_primary_companies.title == null);
		System.assert(objNon_primary_companies.company_size == null);
		System.assert(objNon_primary_companies.tag == null);
		System.assert(objNon_primary_companies.url == null);
		System.assert(objNon_primary_companies.career_level == null);
		System.assert(objNon_primary_companies.begin_date == null);
		System.assert(objNon_primary_companies.description == null);
		System.assert(objNon_primary_companies.end_date == null);
		System.assert(objNon_primary_companies.industry == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Birth_date objBirth_date = new Birth_date(System.JSON.createParser(json));
		System.assert(objBirth_date != null);
		System.assert(objBirth_date.day == null);
		System.assert(objBirth_date.month == null);
		System.assert(objBirth_date.year == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Photo_urls objPhoto_urls = new Photo_urls(System.JSON.createParser(json));
		System.assert(objPhoto_urls != null);
		System.assert(objPhoto_urls.large == null);
		System.assert(objPhoto_urls.mini_thumb == null);
		System.assert(objPhoto_urls.thumb == null);
		System.assert(objPhoto_urls.medium_thumb == null);
		System.assert(objPhoto_urls.maxi_thumb == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		//Languages objLanguages = new Languages(System.JSON.createParser(json));
		//System.assert(objLanguages != null);
		//System.assert(objLanguages.language.name == null);
		
		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Primary_company objPrimary_company = new Primary_company(System.JSON.createParser(json));
		System.assert(objPrimary_company != null);
		System.assert(objPrimary_company.name == null);
		System.assert(objPrimary_company.title == null);
		System.assert(objPrimary_company.company_size == null);
		System.assert(objPrimary_company.tag == null);
		System.assert(objPrimary_company.url == null);
		System.assert(objPrimary_company.career_level == null);
		System.assert(objPrimary_company.begin_date == null);
		System.assert(objPrimary_company.description == null);
		System.assert(objPrimary_company.end_date == null);
		System.assert(objPrimary_company.industry == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Professional_experience objProfessional_experience = new Professional_experience(System.JSON.createParser(json));
		System.assert(objProfessional_experience != null);
		System.assert(objProfessional_experience.primary_company == null);
		System.assert(objProfessional_experience.non_primary_companies == null);
		System.assert(objProfessional_experience.awards == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Schools objSchools = new Schools(System.JSON.createParser(json));
		System.assert(objSchools != null);
		System.assert(objSchools.name == null);
		System.assert(objSchools.degree == null);
		System.assert(objSchools.notes == null);
		System.assert(objSchools.subject == null);
		System.assert(objSchools.begin_date == null);
		System.assert(objSchools.end_date == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		xingPersonFullProfile objRoot = new xingPersonFullProfile(System.JSON.createParser(json));
		System.assert(objRoot != null);
		System.assert(objRoot.users == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Awards objAwards = new Awards(System.JSON.createParser(json));
		System.assert(objAwards != null);
		System.assert(objAwards.name == null);
		System.assert(objAwards.date_awarded == null);
		System.assert(objAwards.url == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		Time_zone objTime_zone = new Time_zone(System.JSON.createParser(json));
		System.assert(objTime_zone != null);
		System.assert(objTime_zone.name == null);
		System.assert(objTime_zone.utc_offset == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		im_accounts objim_accounts = new im_accounts(System.JSON.createParser(json));
		System.assert(objim_accounts != null);
		System.assert(objim_accounts.values == null);		
	}
}